{"version":3,"sources":["Loading.tsx","Login.tsx","Connection.tsx","HandOfCards.tsx","Predictions.tsx","ChooseTrump.tsx","GamePlay.tsx","ContractWhist.tsx","index.tsx"],"names":["Loading","react_default","a","createElement","Login","_ref","entered_game","name","game_id","onChangeName","onChangeGameId","onJoin","onLogout","href","onClick","Fragment","type","value","onChange","e","target","URL","location","origin","replace","Connection","ws","WebSocket","_this2","this","Promise","res","rej","console","log","onopen","props","sendMessage","onmessage","evt","message","JSON","parse","data","setState","Object","objectSpread","onclose","setTimeout","reconnect","bind","onConnect","user_id","localStorage","getItem","uuidv4","_this$props","send","stringify","_this$props2","setItem","removeItem","reload","_this3","className","Loading_Loading","Login_Login","join","logout","Component","HandOfCards","cards","map","c","i","playing_cards_esm","key","card","id","deck","filter","size","Predictions","in_play","onSubmitPrediction","_useState","useState","_useState2","slicedToArray","prediction","setPrediction","parseInt","ChooseTrump","onSubmitTrump","trump","setTrump","GamePlay","mode","hand","admin","onStart","ModeComponent","Predictions_Predictions","assign","x","ChooseTrump_ChooseTrump","suit","length","HandOfCards_HandOfCards","ContractWhist","state","players","cards_per_hand","predictions","trump_suit","Connection_Connection","GamePlay_GamePlay","ReactDOM","render","ContractWhist_ContractWhist","document","getElementById"],"mappings":"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","file":"static/js/main.5d3beda7.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nexport const Loading: FC = () =>\n  <div>\n    Loading...\n  </div>","import React, { FC } from 'react';\n\ninterface ILoginProps {\n  entered_game: boolean,\n  name: string,\n  game_id: string,\n  onChangeName(name: string): void,\n  onChangeGameId(id: string): void,\n  onJoin(): void,\n  onLogout(): void\n}\n\nexport const Login: FC<ILoginProps> = ({ entered_game, name, game_id, onChangeName, onChangeGameId, onJoin, onLogout }) =>\n  !entered_game ?\n  <>\n    Your Name: <input type=\"text\" value={name} onChange={(e) => onChangeName(e.target.value)} /><br />\n    Join a game: <input type=\"text\" value={game_id} onChange={(e) => onChangeGameId(e.target.value)} /><br />\n    <button onClick={() => onJoin()}>Join</button>\n  </>\n  :\n  <div>\n    Game ID: <b>{game_id}</b><br />\n    Your Name: <b>{name}</b><br />\n    <a href=\"#\" onClick={() => onLogout()}>Logout</a>\n  </div>","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { IContractWhistState } from './ContractWhist';\nimport { Loading } from './Loading';\nimport { Login } from './Login';\n\nconst URL = location.origin.replace(/^http/, 'ws')\n\ninterface IConnectionProps {\n  name: string\n  game_id: string,\n  entered_game: boolean,\n  user_id: string,\n  onConnect(sendMessage: (data: any) => void): void,\n  setState(updates: Partial<IContractWhistState>): void\n}\n\nexport default class Connection extends Component<IConnectionProps> {\n  private ws = new WebSocket(URL)\n\n  reconnect() {\n    return new Promise((res, rej) => {\n      console.log('connecting...')\n      const ws = new WebSocket(URL)\n      ws.onopen = () => {\n        console.log('connected')\n        if (this.props.entered_game) {\n          this.sendMessage({ type: \"retrieve_game\" })\n        }\n        res()\n      }\n\n      ws.onmessage = evt => {\n        const message = JSON.parse(evt.data)\n        console.log(message)\n        this.props.setState({ ...message, entered_game: true })\n      }\n\n      ws.onclose = () => {\n        console.log('disconnected')\n        setTimeout(this.reconnect.bind(this), 1000)\n      }\n      this.ws = ws\n      this.props.onConnect(this.sendMessage.bind(this))\n    })\n  }\n\n  async componentDidMount() {\n    await this.reconnect()\n    const user_id = localStorage.getItem('user_id')\n    const name = localStorage.getItem('name')\n    const game_id = localStorage.getItem('game_id')\n    if (user_id && game_id) {\n      this.props.setState({ game_id, user_id, name })\n      this.sendMessage({ type: \"retrieve_game\" })\n    }\n    else {\n      this.props.setState({ user_id: uuidv4() })\n    }\n  }\n\n  sendMessage(data) {\n    const { game_id, user_id, name } = this.props\n    this.ws.send(JSON.stringify({ ...data, game_id, user_id, name }))\n  }\n\n  join() {\n    const { name, game_id, user_id } = this.props\n    localStorage.setItem('user_id', user_id)\n    localStorage.setItem('game_id', game_id)\n    localStorage.setItem('name', name)\n    this.sendMessage({ type: \"new_player\", value: name })\n  }\n\n  logout() {\n    localStorage.removeItem('user_id')\n    localStorage.removeItem('game_id')\n    localStorage.removeItem('name')\n    location.reload()\n  }\n\n  render() {\n    return (\n      <div className=\"connection\">\n        {\n          this.props.user_id === null ?\n          <Loading />\n          :\n          <Login\n            name={this.props.name}\n            game_id={this.props.game_id}\n            entered_game={this.props.entered_game}\n            onChangeName={name => this.props.setState({ name })}\n            onChangeGameId={game_id => this.props.setState({ game_id })}\n            onJoin={this.join.bind(this)}\n            onLogout={this.logout.bind(this)}\n          />\n        }\n      </div>\n    );\n  }\n\n}\n\n","import React, { FC } from 'react';\nimport { deck, PlayingCard, ICard } from '@karlandin/playing-cards'\n\ninterface IHandOfCardsProps {\n  cards: string[]\n}\n\nconst findCardById = (id: string): ICard =>\n  deck.filter(card => card.id == id)[0]\n\nexport const HandOfCards: FC<IHandOfCardsProps> = ({ cards }) =>\n  <div className=\"cards_hand\">\n    {\n      cards.map((c, i) =>\n        <PlayingCard key={i} card={findCardById(c)} size=\"small\" />\n      )\n    }\n  </div>","import React, { useState, FC } from 'react';\nimport { IContractWhistState } from './ContractWhist';\n\ninterface IPredictionsProps extends IContractWhistState {\n  onSubmitPrediction(x: number): void\n}\n\nexport const Predictions: FC<IPredictionsProps> = ({ name, in_play, onSubmitPrediction }) => {\n  const [prediction, setPrediction] = useState<number>(null)\n\n  return (\n    <div className=\"predictions\">\n      {\n        name == in_play ?\n        <>\n          <label>Enter the number of tricks you think you will win</label>\n          <br />\n          <input value={prediction} onChange={(e) => setPrediction(parseInt(e.target.value))} />\n          <br />\n          <button onClick={() => onSubmitPrediction(prediction)}>Submit</button>\n        </>\n        :\n        <span>{in_play} is currently predicting their expected number of tricks</span>\n      }\n    </div>\n  )\n}","import React, { useState, FC } from 'react';\nimport { IContractWhistState } from './ContractWhist';\n\ninterface IChooseTrumpProps extends IContractWhistState {\n  onSubmitTrump(suit: string): void\n}\n\nexport const ChooseTrump: FC<IChooseTrumpProps> = ({ name, in_play, onSubmitTrump }) => {\n  const [trump, setTrump] = useState<string>(\"\")\n\n  return (\n    <div className=\"predictions\">\n      {\n        name == in_play ?\n        <>\n          <label>You picked the highest prediction, please choose the trump suit</label>\n          <br />\n          <select value={trump} onChange={(e) => setTrump(e.target.value)}>\n            <option value=\"\">Select</option>\n            <option value=\"C\">Clubs</option>\n            <option value=\"H\">Hearts</option>\n            <option value=\"D\">Diamonds</option>\n            <option value=\"S\">Spades</option>\n          </select>\n          <br />\n          <button onClick={() => onSubmitTrump(trump)}>Submit</button>\n        </>\n        :\n        <span>{in_play} is currently choosing the trump suit</span>\n      }\n    </div>\n  )\n}","import React, { FC } from 'react';\nimport { HandOfCards } from './HandOfCards';\nimport { IContractWhistState } from './ContractWhist';\nimport { Predictions } from './Predictions';\nimport { ChooseTrump } from './ChooseTrump';\n\ninterface IGamePlayProps extends IContractWhistState {\n  onStart(): void\n}\n\nexport const GamePlay: FC<IGamePlayProps> = (props) => {\n  const { mode, hand, admin, onStart, send } = props\n\n  let ModeComponent: FC = () => <></>\n  if (mode == 'predictions') {\n    ModeComponent = () => <Predictions onSubmitPrediction={x => send({ type: \"submit_prediction\", value: x })} {...props} />\n  }\n  else if (mode == 'choose_trump') {\n    ModeComponent = () => <ChooseTrump onSubmitTrump={suit => send({ type: \"submit_trump\", value: suit })} {...props} />\n  }\n\n  return (\n    <div className=\"game_play\">\n      {\n        (hand.length == 0 ?\n          (admin ? <button onClick={onStart}>Start</button> : <span>Waiting for game to start...</span>)\n          :\n          <>\n            <HandOfCards cards={hand} />\n            <ModeComponent />\n          </>\n        )\n      }\n    </div>\n  )\n}","import React, { Component } from 'react';\nimport Connection from './Connection';\nimport { HandOfCards } from './HandOfCards';\nimport { GamePlay } from './GamePlay';\n\nexport interface IContractWhistState {\n  players: string[],\n  name: string\n  game_id: string,\n  entered_game: boolean,\n  user_id: string,\n  cards_per_hand: number,\n  mode: 'players_joining' | 'predictions' | 'choose_trump' | 'play' | 'scores',\n  send: (data: any) => void,\n  hand: string[],\n  in_play: string,\n  admin: boolean,\n  predictions: number[],\n  trump_suit: string\n}\n\nexport default class ContractWhist extends Component<{}, IContractWhistState> {\n  state: IContractWhistState = {\n    players: [],\n    name: null,\n    game_id: null,\n    entered_game: false,\n    user_id: null,\n    cards_per_hand: null,\n    mode: null,\n    send: null,\n    hand: [],\n    in_play: null,\n    admin: null,\n    predictions: [],\n    trump_suit: null\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Connection\n          name={this.state.name}\n          game_id={this.state.game_id}\n          user_id={this.state.user_id}\n          entered_game={this.state.entered_game}\n          onConnect={send => this.setState({ send })}\n          setState={this.setState.bind(this)}\n        />\n        { this.state.entered_game &&\n          <GamePlay\n            onStart={() => this.state.send({ type: \"start_game\" })}\n            {...this.state}\n          />\n        }\n      </div>\n    )\n  }\n\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ContractWhist from './ContractWhist';\n\nReactDOM.render(<ContractWhist />, document.getElementById('root'));"],"sourceRoot":""}